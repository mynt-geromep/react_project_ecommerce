{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [product, setProduct] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController(); //useEffect cleanup\n\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          // if response is not OK\n          throw Error(\"Could not Fetch the Data for that Resource\");\n        }\n\n        return res.json();\n      }).then(data => {\n        setProduct(data);\n        setLoading(false);\n      }).catch(err => {\n        if (err.name === \"AbortError\") {\n          // AbortError\n          console.log('Fetch Aborted');\n        } else {\n          // Network / Server Error\n          setLoading(false);\n          setError(err.message);\n        }\n      });\n    }, 1000);\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    product,\n    loading,\n    error\n  };\n};\n\n_s(useFetch, \"OykZgolRXF5NMKIrRjnuAyPsifE=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/Gerome/Desktop/react_practice/src/useFetch.js"],"names":["useEffect","useState","useFetch","url","product","setProduct","loading","setLoading","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","data","catch","err","name","console","log","message","abort"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,SAAS,GAAG,IAAIC,eAAJ,EAAlB,CADY,CAC6B;;AAEzCC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACV,GAAD,EAAM;AAACW,QAAAA,MAAM,EAAGJ,SAAS,CAACI;AAApB,OAAN,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,YAAG,CAACA,GAAG,CAACC,EAAR,EAAY;AAAE;AACV,gBAAMC,KAAK,CAAC,4CAAD,CAAX;AACH;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,OANL,EAOKJ,IAPL,CAOUK,IAAI,IAAI;AACVf,QAAAA,UAAU,CAACe,IAAD,CAAV;AACAb,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAVL,EAWKc,KAXL,CAWWC,GAAG,IAAI;AACV,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAAE;AAC7BC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,SAFD,MAEO;AAAE;AACLlB,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,UAAAA,QAAQ,CAACa,GAAG,CAACI,OAAL,CAAR;AACH;AACJ,OAlBL;AAmBH,KApBS,EAoBP,IApBO,CAAV;AAwBA,WAAO,MAAMhB,SAAS,CAACiB,KAAV,EAAb;AACH,GA5BQ,EA4BN,CAACxB,GAAD,CA5BM,CAAT;AA8BA,SAAO;AAACC,IAAAA,OAAD;AAAUE,IAAAA,OAAV;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CApCD;;GAAMN,Q;;AAsCN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nconst useFetch = (url) => {\r\n    const [product, setProduct] = useState(null)\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(null)\r\n    \r\n    useEffect(() => {\r\n        const abortCont = new AbortController(); //useEffect cleanup\r\n\r\n        setTimeout(() => {\r\n            fetch(url, {signal : abortCont.signal})\r\n                .then(res => {\r\n                    if(!res.ok) { // if response is not OK\r\n                        throw Error(\"Could not Fetch the Data for that Resource\")\r\n                    }\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                    setProduct(data)\r\n                    setLoading(false)\r\n                })\r\n                .catch(err => {\r\n                    if (err.name === \"AbortError\") { // AbortError\r\n                        console.log('Fetch Aborted')\r\n                    } else { // Network / Server Error\r\n                        setLoading(false)\r\n                        setError(err.message)\r\n                    }\r\n                })\r\n        }, 1000)\r\n\r\n        \r\n\r\n        return () => abortCont.abort();\r\n    }, [url])\r\n\r\n    return {product, loading, error}\r\n}\r\n \r\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}