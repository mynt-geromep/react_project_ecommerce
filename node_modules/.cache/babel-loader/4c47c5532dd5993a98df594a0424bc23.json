{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [product, setProduct] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const abortCont = new AbortController(); //useEffect cleanup\n\n    fetch(url, {\n      signal: abortCont.signal\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      if (err.name === \"AbortError\") {\n        // AbortError\n        console.log('fetch aborted'); // console.log(data)\n      } else {\n        setProduct(data);\n        setLoading(false);\n      }\n    });\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    product,\n    loading\n  };\n};\n\n_s(useFetch, \"fMvLS56bByYMCwfNM+kY3O3dlMw=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/Gerome/Desktop/react_practice/src/useFetch.js"],"names":["useEffect","useState","useFetch","url","product","setProduct","loading","setLoading","abortCont","AbortController","fetch","signal","then","res","json","data","err","name","console","log","abort"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,SAAS,GAAG,IAAIC,eAAJ,EAAlB,CADY,CAC6B;;AAEzCC,IAAAA,KAAK,CAACP,GAAD,EAAM;AAACQ,MAAAA,MAAM,EAAGH,SAAS,CAACG;AAApB,KAAN,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AAET,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,KAJL,EAKKF,IALL,CAKUG,IAAI,IAAI;AACV,UAAIC,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAAE;AAC7BC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAD2B,CAE/B;AACC,OAHD,MAGO;AACHd,QAAAA,UAAU,CAACU,IAAD,CAAV;AACAR,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAbL;AAeA,WAAO,MAAMC,SAAS,CAACY,KAAV,EAAb;AACH,GAnBQ,EAmBN,CAACjB,GAAD,CAnBM,CAAT;AAqBA,SAAO;AAACC,IAAAA,OAAD;AAAUE,IAAAA;AAAV,GAAP;AACH,CA1BD;;GAAMJ,Q;;AA4BN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nconst useFetch = (url) => {\r\n    const [product, setProduct] = useState(null)\r\n    const [loading, setLoading] = useState(true)\r\n    \r\n    useEffect(() => {\r\n        const abortCont = new AbortController(); //useEffect cleanup\r\n\r\n        fetch(url, {signal : abortCont.signal})\r\n            .then(res => {\r\n                \r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                if (err.name === \"AbortError\") { // AbortError\r\n                    console.log('fetch aborted')\r\n                // console.log(data)\r\n                } else {\r\n                    setProduct(data)\r\n                    setLoading(false)\r\n                }\r\n            })\r\n\r\n        return () => abortCont.abort();\r\n    }, [url])\r\n\r\n    return {product, loading}\r\n}\r\n \r\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}