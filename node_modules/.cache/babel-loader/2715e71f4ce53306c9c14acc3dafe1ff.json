{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [product, setProduct] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const abortCont = new AbortController(); //useEffect cleanup\n\n    fetch(url, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        // if response is not OK\n        throw Error(\"could not fetch the data for that resource\");\n      }\n\n      return res.json();\n    }).then(data => {\n      setProduct(data);\n      setLoading(false);\n    }).cat;\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    product,\n    loading\n  };\n};\n\n_s(useFetch, \"fMvLS56bByYMCwfNM+kY3O3dlMw=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/Gerome/Desktop/react_practice/src/useFetch.js"],"names":["useEffect","useState","useFetch","url","product","setProduct","loading","setLoading","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","data","cat","abort"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,SAAS,GAAG,IAAIC,eAAJ,EAAlB,CADY,CAC6B;;AAEzCC,IAAAA,KAAK,CAACP,GAAD,EAAM;AAACQ,MAAAA,MAAM,EAAGH,SAAS,CAACG;AAApB,KAAN,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,UAAG,CAACA,GAAG,CAACC,EAAR,EAAY;AAAE;AACV,cAAMC,KAAK,CAAC,4CAAD,CAAX;AACH;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,KANL,EAOKJ,IAPL,CAOUK,IAAI,IAAI;AACVZ,MAAAA,UAAU,CAACY,IAAD,CAAV;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAVL,EAWKW,GAXL;AAaA,WAAO,MAAMV,SAAS,CAACW,KAAV,EAAb;AACH,GAjBQ,EAiBN,CAAChB,GAAD,CAjBM,CAAT;AAmBA,SAAO;AAACC,IAAAA,OAAD;AAAUE,IAAAA;AAAV,GAAP;AACH,CAxBD;;GAAMJ,Q;;AA0BN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nconst useFetch = (url) => {\r\n    const [product, setProduct] = useState(null)\r\n    const [loading, setLoading] = useState(true)\r\n    \r\n    useEffect(() => {\r\n        const abortCont = new AbortController(); //useEffect cleanup\r\n\r\n        fetch(url, {signal : abortCont.signal})\r\n            .then(res => {\r\n                if(!res.ok) { // if response is not OK\r\n                    throw Error(\"could not fetch the data for that resource\")\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                setProduct(data)\r\n                setLoading(false)\r\n            })\r\n            .cat\r\n\r\n        return () => abortCont.abort();\r\n    }, [url])\r\n\r\n    return {product, loading}\r\n}\r\n \r\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}